const assert = require("assert");
const {move }=require('../services/tetris.js')
const { expect } = require("chai");
describe("moveRight piece", () => {
    describe("Comprobar que la pieza se mueva la derecha ", () => {
        it("Debe moverse una posicion a la derecha", () => {
            const tableroActual = [['1', '1', '0', '0', '0', '0', '0', '0', '0', '0'],
                ['1', '1', '0', '0', '0', '0', '0', '0', '0', '0'],
                ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
                ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
                ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
                ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
                ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
                ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
                ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
                ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
                ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
                ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
                ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
                ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
                ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
                ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0']];
            const tableroexpected = [['0', '1', '1', '0', '0', '0', '0', '0', '0', '0'],
                                    ['0', '1', '1', '0', '0', '0', '0', '0', '0', '0'],
                                    ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
                                    ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
                                    ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
                                    ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
                                    ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
                                    ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
                                    ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
                                    ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
                                    ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
                                    ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
                                    ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
                                    ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
                                    ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
                                    ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0']];
            const position = [{"y": 0, "x": 0}, {"y": 0, "x": 1}, {"y": 1, "x": 0}, {"y": 1, "x": 1}];
            let req = {}
            req.position = position
            req.board = tableroActual
            req.direction = "right"
            const {board} = move(req)

            expect(tableroexpected).to.deep.equal(board);

        })

    })
})

describe("moveRight piece", () => {
    describe("Comprobar que la pieza se mueva la derecha ", () => {
        it("Si llega limite tablero devuelve el mismo tablero", () => {
            const tableroActual = [['0', '0', '0', '0', '0', '0', '0', '0', '1', '1'],
                ['0', '0', '0', '0', '0', '0', '0', '0', '1', '1'],
                ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
                ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
                ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
                ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
                ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
                ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
                ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
                ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
                ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
                ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
                ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
                ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
                ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
                ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0']];
            const tableroexpected = [['0', '0', '0', '0', '0', '0', '0', '0', '1', '1'],
                                    ['0', '0', '0', '0', '0', '0', '0', '0', '1', '1'],
                                    ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
                                    ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
                                    ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
                                    ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
                                    ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
                                    ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
                                    ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
                                    ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
                                    ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
                                    ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
                                    ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
                                    ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
                                    ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
                                    ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0']];
            const position = [{"y": 0, "x": 8}, {"y": 1, "x": 9}, {"y": 0, "x": 9}, {"y": 1, "x": 9}];
            let req = {}
            req.position = position
            req.board = tableroActual
            req.direction = "right"
            const {board} = move(req)
            expect(tableroexpected).to.deep.equal(board);

        })

    })
})
